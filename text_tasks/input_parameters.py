from random import randint, choice
from pymorphy2 import MorphAnalyzer


morph = MorphAnalyzer()


def input_parameters_work(i=None):
    values = {
        'pers1': ["студент Вова", "Карлсон", 'дровосек Миша', "блогер Коля", "Федя", "певец Паша", "медбрат Аркадий",
                  "лев", "первый рабочий", "токарь Миша", "швея Аня", "первая труба", "цех", "предприятие", 'мастер',
                  "бригада трактористов", 'бригада рабочих', "печник", 'ферма', 'овощная база', 'мешок', 'элеватор'],
        'pers2': ["студент Петя", "Малыш", "дровосек Коля", "блогер Толя", "Паша", "певец Саша", "медбрат Рома", "волк",
                  "второй рабочий", "токарь Вася", "швея Оля", "вторая труба", "цех", "предприятие", 'ученик',
                  "бригада трактористов", 'бригада рабочих', "печник", 'ферма', 'овощная база', 'мешок', 'элеватор'],
        'pers3': ["студентка Кристина", "Фрекен Бок", "дровосек Саша", "блогер Лева", "Вася", "певица Настя",
                  "медсестра Вика", "пес", "третий рабочий", "токарь Гера", "швея Юля", "третья труба", "цех",
                  "предприятие", "подмастерье", "бригада трактористов", 'бригада рабочих', "печник", 'ферма', 'овощная база',
                  'мешок', 'элеватор'],
        'task': [[("изготовить образец для измерений", None), ("съесть пиццу", ('площадью', 'м2')),
                  ("провести измерения", None), ("решить задачу", ('количества', "шт")), ("выплавить сплав", None),
                  ('отшлифовать образцы', ('количества', "шт"))],
                 [("распугать воров", None), ("сварить варенье", ('количества', "шт")),
                  ("съесть торт", ('объемом', 'шт')), ("съесть плюшки", ('количества', "шт"))],
                 [("снять обзор на топоры", ('продолжительностью', 'ч')), ("наколоть дров", ('количества', "шт")),
                  ("срубить дерево", ('количество', "шт")), ("донести хворост", None)],
                 [(f'снять видео {choice(["в TikTok", "на YouTube", "в Инстаграм"])}', None),
                  ('написать для публикации текст', None),
                  (f'снять обзор на {choice(["машину", "ресторан", "игру", "квартиру"])}', None),
                  ("снять видео", ('количества', 'шт')), ("снять видеообзор", ('количества', 'шт'))],
                 [("прополоть грядку", ('количества', 'шт')), ("покрасить забор", ('количества', 'шт')),
                  ("отремонтировать машину", ('количества', 'шт'))],
                 [("сыграть концерт", ('количества', 'шт')), ("сочинить песню", ('количества', 'шт')),
                  ("выступить на фестивале", None), ("сочинить к музыке стихи", None)],
                 [("вылечить пациента", ('количества', 'чел')), ("поставить укол", ('количества', 'шт')),
                  ("смешать физраствор", None), ("сменить повязку", ('количества', 'чел')),
                  ("сделать перевязку", ('количества', 'шт'))],
                 [("съесть овцу", ('количества', 'шт')), ("съесть курицу", ('количества', 'шт'))],
                 [("покрасить забор", ('количества', 'шт')), ("выполнить заказ", ('количества', 'шт')),
                  ("починить санузел", ('количества', 'шт'))],
                 [("выточить деталь", ('количества', 'шт')), ("починить станок", ('количества', 'шт')),
                  ("обработать деталь", ('количества', 'шт')), ("заточить сверло", ('количества', 'шт'))],
                 [("сшить кофту", ('количества', 'шт')), ("сшить костюм на хэллоуин", None),
                  ("сшить костюм на ComicCon", None), ("сшить костюм", ('количества', 'шт'))],
                 [("наполнить бассейн", ('объемом', 'м3'))],
                 [('выпустить изделие', ('в количестве', 'шт')), ('изготовить изделие', ('в количестве', 'шт'))],
                 [("изготовить насос", ('в количестве', 'шт')), ('выпустить изделие', ('в количестве', 'шт'))],
                 [('изготовить деталь', ('количества', 'шт')), ('выполнить заказ', ('количества', 'шт'))],
                 [('вспахать поле', ('площадью', 'м2')), ('вспахать участок', ('площадью', 'м2'))],
                 [('сделать ремонт дороги', ('длиной', 'км')), ('выполнить заказ', ('количество', 'шт')),
                  ('покрасить гараж', ('объемом', 'м3'))],
                 [('сложить печь', ('объемом', 'м3'))],
                 [('изготовить', ('силоса', 'кг'))],
                 [('вырастить', choice([('картофеля', 'кг'), ('свеклы', 'кг'), ('моркови', 'кг')]))],
                 [('хранить', ('сахара', 'кг'))],
                 [('хранить', ('зерна', 'кг'))]
                ]
    }
    # случайным образом получаем сюжет задачи
    i = i if i is not None else randint(0, len(values['pers1']) - 1)

    return values['pers1'][i], values['pers2'][i], values['pers3'][i], choice(values['task'][i])


def correct_word(key, values) -> str:
    """Функция для подбора правильных склонений слов"""
    words_collection = {
        'раз': ['раз', 'раза', 'раз'],
        'день': ['день', 'дня', 'дней'],
        'поле': ['поле', 'поля', 'полей']
    }
    if key in words_collection:
        words = words_collection.get(key)
        return help_to_correct_word(words, values)
    else:
        task1, task2 = key.rsplit(' ', maxsplit=1)
        result = []
        for value in values:
            try:
                if task2 in words_collection:
                    words = words_collection.get(task2)
                    result.append(help_to_correct_word(words, value))
                else:
                    result.append(morph.parse(task2)[0].make_agree_with_number(value).word)
            except Exception:
                result.append(task2)
        return task1, result


def help_to_correct_word(words, value):
    if all((value % 10 == 1, value % 100 != 11)):
        return words[0]
    elif all((2 <= value % 10 <= 4,
              any((value % 100 < 10, value % 100 >= 20)))):
        return words[1]
    return words[2]


def gent_pers(persons, padej='gent'):
    persons_gent = []
    for pers in persons:
        if len(pers.split(' ')) == 1:
            try:
                pers_gent = morph.parse(pers)[0].inflect({padej}).word
                pers_result = pers_gent.title() if pers[0].isupper() else pers_gent
                persons_gent.append(pers_result)
            except AttributeError:
                persons_gent.append(pers)
        else:
            try:
                pers1_gent_1, pers1_gent_2 = (morph.parse(item)[0].inflect({padej}).word for item in pers.split())
                if pers1_gent_1 == 'второй':
                    pers1_gent_1 = 'второго' if morph.parse(pers1_gent_2)[0].tag.gender != 'femn' else pers1_gent_1
                pers1_gent_2 = pers1_gent_2.title() if pers.split()[1][0].isupper() else pers1_gent_2
                persons_gent.append(f'{pers1_gent_1} {pers1_gent_2}')
            except AttributeError:
                persons_gent.append(pers)
    return persons_gent


def start_title(person):
    if len(person.split()) == 1:
        return person.title()
    else:
        pers1, pers2 = person.split()
        pers2 = pers2.title() if pers2[0].isupper() else pers2
        return f'{pers1.title()} {pers2}'


if __name__ == '__main__':
    print(correct_word('поле', 72))