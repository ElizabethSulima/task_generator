from random import randint, choice
from fractions import Fraction
import sympy

from input_parameters import input_parameters_work, morph, correct_word


def task_13021():
    """Генерация аналогичных задач 13.021 М.И. Сканави:
    Одна бригада может убрать поле за 12 дней. Другой бригаде на выполнение этой же работы нужно 75% этого времени.
    После того как в течение 5 дней работала одна первая бригада, к ней присоединилась вторая, и обе вместе закончили
    работу. Сколько дней бригады работали вместе ?
    """
    while True:
        # delta_t, t1 = 5, 12
        # k = 75
        delta_t, t1 = sorted(randint(1, 100) for _ in range(2))
        k = randint(10, 100)
        t2 = k / 100 * t1
        t = (1 - delta_t / t1) / (1 / t1 + 1 / t2)
        if int(t) - t == 0 and t != 0:
            break

    return t


def task_13023():
    """ Генерация аналогичных задач 13.023 М.И. Сканави:
    Однотипные детали обрабатываются на двух станках. Производительность первого станка на 40 % больше производительности
    второго. Сколько деталей было обработано за смену каждым станком, если первый работал в эту смену 6 ч, а второй - 8 ч,
    причём оба изготовили 820 деталей.
    """
    while True:
        k = randint(50, 100)  # / 100
        s = randint(10, 1000)
        t1, t2 = sorted(randint(1, 100) for _ in range(2))
        v2 = s / ((1 + k / 100) * t1 + t2)
        v1 = (1 + k / 100) * v2
        s1, s2 = v1 * t1, v2 * t2
        if int(v2) - v2 == 0 and int(v1) - v1 == 0:
            print(v1, v2)
            break

    questions = [
        'Какова скорость каждого персонажа?',
        'Сколько деталей обработано каждым персонажем'
    ]
    return s1, s2


def task_13024():
    """ Генерация аналогичных задач 13.024, 13.010 М.И. Сканави:
    Тракторная бригада может вспахать 5/6 участка земли за 4 ч 15 мин До обеденного перерыва бригада работала 4.5 ч,
    после чего осталось невспаханными ещё 8га. Как велик был участок?
    """
    while True:
        a, b = sorted(randint(1, 10) for _ in range(2))
        x = a / b if a != b else 2 / 3
        delta_s = randint(1, 100)
        t2, t1 = sorted(randint(1, 1000) for _ in range(2))
        t = t1 / x
        s = delta_s * t / (t - t2)
        if int(s) - s == 0:
            print(t1, t2, delta_s, x)
            break
    return f'{s} т, {t * 60} min'


def task_13032():
    """Генерация аналогичных задач 13.032 М.И. Сканави:
    За 3,5 ч работы один штамповочный пресс может изготовить 42% всех заказанных деталей. Второй пресс за 9 ч работы
    может изготовить 60% всех деталей, а скорости выполнения работы на третьем и на втором прессах относятся как 6:5.
    За какое время будет выполнен весь заказ, если все три пресса будут работать одновременно?
    """
    while True:
        k1, k2 = (randint(10, 100) for _ in range(2))  # / 100
        t1, t2 = sorted(randint(1, 100) for _ in range(2))
        a, b = (randint(1, 10) for _ in range(2))
        a, b = (a, b) if a != b else (6, 5)
        t = 1 / (k1 / t1 + k2 / t2 * (1 + a/b)) * 60
        if int(t) - t == 0:
            break
    return t


def task_13033():
    """Генерация аналогичных задач 13.033 М.И. Сканави:
    Каждая из двух машинисток перепечатывала рукопись объемом 72 страницы. Первая машинистка перепечатывала 6 страниц
    за то же время, за которое вторая перепечатывала 5 страниц. Сколько страниц перепечатывала каждая машинистка в час,
    если первая закончила работу на 1,5 ч быстрее?
    """
    while True:
        a, b = sorted(randint(1, 10) for _ in range(2))
        s = randint(1, 100)
        delta_t = randint(1, 10)
        v2 = s / delta_t * (1 - a / b)
        v1 = b / a * v2
        if int(v1) - v1 == 0 and v1 != 0 and int(v2) - v2 == 0:
            break
    return v1, v2


def task_13037():
    """Генерация аналогичных задач 13.037 М.И. Сканави:
    Одна мельница может смолоть 19 ц пшеницы за 3 ч., другая 32 ц за 5 ч.а третья 10 ц за 2 часа. Как распределить 133
    тонны пшеницы между этими мельницами чтобы одновременно начав работу они окончили её также одновременно?"""
    # s1, s2, s3 = 19, 32, 10
    # t1, t2, t3 = 3, 5, 2
    while True:
        # s = 133
        s = randint(10, 200)
        s1, s2, s3 = (randint(1, 100) for _ in range(3))
        t1, t2, t3 = (randint(1, 10) for _ in range(3))
        t = s / (s1/t1 + s2/t2 + s3/t3)
        x1, x2, x3 = s1 / t1 * t * 10, s2 / t2 * t * 10, s3 / t3 * t * 10
        if int(t * 60) - t * 60 == 0 and int(x1) - x1 == 0 and int(x2) - x2 == 0 and int(x3) - x3 == 0:
            break
    return f'{s} т, {t * 60} min, {x1, x2, x3}'


def task_13075():
    """Генерация аналогичных задач 13.075 М.И. Сканави:
    Двое рабочих за одну смену изготовили 72 детали. После увеличения производительности первого рабочего на 15%,
    а второго на 25%, они вместе за смену изготовили 86 деталей. Сколько деталей изготовляет каждый рабочий за смену
    после (или до) повышения производительности труда?"""
    while True:
        # k1, k2 = 15, 25
        # s1, s2 = 72, 86
        k1, k2 = (randint(5, 50) for _ in range(2))  # / 100
        if k1 == k2:
            k2 = 51 - k2
        s1, s2 = sorted(randint(10, 100) for _ in range(2))

        x2 = (s2 - (1 + k1 / 100) * s1) / (k2 - k1) * 100  # до
        x1 = s1 - x2  # до
        x2_new, x1_new = (1 + k2 / 100) * x2, (1 + k1 / 100) * x1  # после повышения производительности

        if int(x2) - x2 == 0 and int(x2_new) - x2_new == 0 and x1 > 0 and x2 > 0:
            break
    return x2, x1


if __name__ == "__main__":
    print(task_13075())
    # print(task_13037())